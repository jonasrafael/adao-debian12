#!/bin/bash

# Montar Particoes Script for Debian 12
# Autor: Jonas Rafael
# Data: 2025-02-15

# Diret√≥rios de busca de m√≥dulos
MODULE_SEARCH_PATHS=(
    "/lib/modules/$(uname -r)/kernel/fs"
    "/lib/modules/$(uname -r)/kernel"
    "/usr/lib/modules/$(uname -r)/kernel/fs"
)

# Fun√ß√£o de log com suporte a emojis
log() {
    local nivel="$1"
    local mensagem="$2"
    local emoji=""

    case "$nivel" in
        "INFO")    emoji="üåü" ;;
        "AVISO")   emoji="‚ö†Ô∏è" ;;
        "ERRO")    emoji="‚ùå" ;;
        "DEBUG")   emoji="üîç" ;;
        "SUCESSO") emoji="‚úÖ" ;;
        *)         emoji="‚ÑπÔ∏è" ;;
    esac

    echo "$emoji [$nivel] $mensagem"
}

# Fun√ß√£o para encontrar m√≥dulo com suporte a compress√£o
descobrir_modulo() {
    local nome_modulo="$1"
    
    log "DEBUG" "üîé Iniciando busca por m√≥dulo: $nome_modulo"
    log "DEBUG" "üñ•Ô∏è Kernel atual: $(uname -r)"

    for path in "${MODULE_SEARCH_PATHS[@]}"; do
        log "DEBUG" "üîç Verificando caminho: $path"
        
        # Buscar m√≥dulos compactados e n√£o compactados
        local modulo_encontrado=$(find "$path" \( -name "$nome_modulo.ko" -o -name "$nome_modulo.ko.xz" \) 2>/dev/null | head -n 1)
        
        if [ -n "$modulo_encontrado" ]; then
            log "INFO" "üß© M√≥dulo $nome_modulo encontrado em: $modulo_encontrado"
            echo "$modulo_encontrado"
            return 0
        fi
    done
    
    log "ERRO" "‚ùå M√≥dulo $nome_modulo n√£o encontrado em nenhum caminho de busca"
    return 1
}

# Fun√ß√£o para verificar m√≥dulo
verificar_modulo() {
    local modulo_path="$1"
    local nome_modulo=$(basename "$modulo_path" .ko*)

    log "DEBUG" "üî¨ Verificando m√≥dulo detalhadamente: $nome_modulo"

    # Verificar exist√™ncia
    if [ ! -f "$modulo_path" ]; then
        log "ERRO" "‚ùå Arquivo de m√≥dulo n√£o encontrado em $modulo_path"
        return 1
    fi

    # Verificar permiss√µes de leitura
    if [ ! -r "$modulo_path" ]; then
        log "ERRO" "‚ùå Sem permiss√£o de leitura para $modulo_path"
        return 1
    fi

    # Verificar integridade do m√≥dulo
    if [[ "$modulo_path" == *.xz ]]; then
        # Para m√≥dulos compactados, usar xz para verificar
        xz -t "$modulo_path" &>/dev/null
        if [ $? -ne 0 ]; then
            log "ERRO" "‚ùå M√≥dulo $nome_modulo compactado parece estar corrompido"
            return 1
        fi
    else
        # Para m√≥dulos n√£o compactados, usar modinfo
        modinfo "$modulo_path" &>/dev/null
        if [ $? -ne 0 ]; then
            log "ERRO" "‚ùå M√≥dulo $nome_modulo parece estar corrompido"
            return 1
        fi
    fi

    log "SUCESSO" "‚úÖ M√≥dulo $nome_modulo verificado com sucesso"
    return 0
}

# Fun√ß√£o para carregar m√≥dulo
carregar_modulo() {
    local modulo_path="$1"
    local nome_modulo=$(basename "$modulo_path" .ko*)

    log "INFO" "üöÄ Tentando carregar m√≥dulo: $nome_modulo"

    # Verificar se o m√≥dulo j√° est√° carregado
    if lsmod | grep -q "^$nome_modulo "; then
        log "INFO" "‚ÑπÔ∏è M√≥dulo $nome_modulo j√° est√° carregado"
        return 0
    fi

    # Se for um m√≥dulo compactado, descompactar primeiro
    if [[ "$modulo_path" == *.xz ]]; then
        local temp_dir=$(mktemp -d)
        local modulo_base=$(basename "$modulo_path")
        local modulo_descompactado="$temp_dir/${modulo_base%.xz}"

        log "DEBUG" "üì¶ Descompactando m√≥dulo para: $modulo_descompactado"
        xz -dk "$modulo_path" -c > "$modulo_descompactado"

        # Tentar carregar m√≥dulo descompactado
        if insmod "$modulo_descompactado"; then
            log "SUCESSO" "‚úÖ M√≥dulo $nome_modulo carregado com sucesso via insmod"
            rm -rf "$temp_dir"
            return 0
        else
            log "ERRO" "‚ùå Falha ao carregar m√≥dulo descompactado via insmod"
            
            # Tentar com modprobe
            if modprobe "$nome_modulo"; then
                log "SUCESSO" "‚úÖ M√≥dulo $nome_modulo carregado com sucesso via modprobe"
                rm -rf "$temp_dir"
                return 0
            else
                log "ERRO" "‚ùå Falha ao carregar m√≥dulo $nome_modulo via modprobe"
                rm -rf "$temp_dir"
                return 1
            fi
        fi
    fi

    # Tentar carregar m√≥dulo diretamente
    if modprobe "$nome_modulo"; then
        log "SUCESSO" "‚úÖ M√≥dulo $nome_modulo carregado com sucesso via modprobe"
        return 0
    else
        log "ERRO" "‚ùå Falha ao carregar m√≥dulo $nome_modulo"
        return 1
    fi
}

# Fun√ß√£o para verificar se o dispositivo j√° est√° montado
verificar_montagem_existente() {
    local dispositivo="$1"
    local tipo_fs="$2"
    
    # Verificar se o dispositivo j√° est√° montado em qualquer lugar
    local ponto_montagem_atual=$(mount | grep "$dispositivo" | awk '{print $3}')
    if [ -n "$ponto_montagem_atual" ]; then
        log "AVISO" "‚ö†Ô∏è Dispositivo $dispositivo j√° montado em $ponto_montagem_atual"
        return 1
    fi

    # Verificar se j√° existe um ponto de montagem para este dispositivo em /home/jonasrafael/discos/
    local ponto_montagem_padrao="/home/jonasrafael/discos/${tipo_fs}_$(basename "$dispositivo")"
    
    if mountpoint -q "$ponto_montagem_padrao"; then
        log "ERRO" "‚ùå J√° existe um ponto de montagem em $ponto_montagem_padrao"
        return 1
    fi

    # Verificar se o diret√≥rio de montagem j√° cont√©m algo
    if [ "$(ls -A "$ponto_montagem_padrao" 2>/dev/null)" ]; then
        log "ERRO" "‚ùå Diret√≥rio de montagem $ponto_montagem_padrao n√£o est√° vazio"
        return 1
    fi

    echo "$ponto_montagem_padrao"
    return 0
}

# Fun√ß√£o para montar parti√ß√µes com verifica√ß√µes detalhadas
montar_particao() {
    local dispositivo="$1"
    local tipo_fs="$2"

    # Verificar montagem existente
    local ponto_montagem
    ponto_montagem=$(verificar_montagem_existente "$dispositivo" "$tipo_fs")
    if [ $? -ne 0 ]; then
        return 1
    fi

    log "INFO" "üîå Preparando montagem de parti√ß√£o: $dispositivo (tipo: $tipo_fs)"

    # Encontrar m√≥dulo do sistema de arquivos
    local modulo_fs_path
    case "$tipo_fs" in
        "ext4")
            modulo_fs_path=$(descobrir_modulo "ext4") || return 1
            ;;
        "ntfs")
            modulo_fs_path=$(descobrir_modulo "ntfs") || return 1
            ;;
        "hfsplus")
            modulo_fs_path=$(descobrir_modulo "hfsplus") || return 1
            ;;
        "apfs")
            modulo_fs_path=$(descobrir_modulo "apfs") || return 1
            ;;
        *)
            log "ERRO" "‚ùå Sistema de arquivos $tipo_fs n√£o suportado"
            return 1
            ;;
    esac

    # Verificar m√≥dulo em detalhes
    verificar_modulo "$modulo_fs_path" || return 1

    # Carregar m√≥dulo
    carregar_modulo "$modulo_fs_path" || return 1

    # Preparar ponto de montagem
    mkdir -p "$ponto_montagem"

    # Verificar permiss√µes de escrita no ponto de montagem
    if [ ! -w "$ponto_montagem" ]; then
        log "ERRO" "‚ùå Sem permiss√£o de escrita no ponto de montagem $ponto_montagem"
        return 1
    fi

    # Montar parti√ß√£o com op√ß√µes de leitura e escrita
    mount -t "$tipo_fs" -o rw "$dispositivo" "$ponto_montagem"
    
    if [ $? -eq 0 ]; then
        log "SUCESSO" "‚úÖ Parti√ß√£o $dispositivo montada em $ponto_montagem (modo leitura-escrita)"
        
        # Verificar se realmente est√° montado com permiss√£o de escrita
        touch "$ponto_montagem/.write_test" 2>/dev/null
        if [ $? -eq 0 ]; then
            rm "$ponto_montagem/.write_test"
            log "SUCESSO" "‚úÖ Confirmado: Parti√ß√£o montada com sucesso em modo leitura-escrita"
        else
            log "AVISO" "‚ö†Ô∏è Montagem pode estar em modo somente leitura"
            return 1
        fi
    else
        log "ERRO" "‚ùå Falha ao montar $dispositivo em $ponto_montagem"
        return 1
    fi
}

# Fun√ß√£o para escanear parti√ß√µes
escanear_particoes() {
    local tipo_fs="$1"
    local particoes_encontradas=()

    log "INFO" "üîç Escaneando parti√ß√µes $tipo_fs..."

    # Usar lsblk para encontrar parti√ß√µes do tipo especificado
    while read -r linha; do
        if [ -n "$linha" ]; then
            local dispositivo=$(echo "$linha" | awk '{print $1}')
            local uuid=$(echo "$linha" | awk '{print $3}')
            particoes_encontradas+=("/dev/$dispositivo")
        fi
    done < <(lsblk -f | grep "$tipo_fs")

    # Reportar status das parti√ß√µes encontradas
    if [ ${#particoes_encontradas[@]} -eq 0 ]; then
        log "AVISO" "‚ö†Ô∏è Nenhuma parti√ß√£o $tipo_fs encontrada"
        return 1
    else
        log "INFO" "üéâ Encontradas ${#particoes_encontradas[@]} parti√ß√£o(√µes) $tipo_fs"
        
        # Listar parti√ß√µes encontradas
        for particao in "${particoes_encontradas[@]}"; do
            log "INFO" "üìÅ Parti√ß√£o encontrada: $particao"
        done

        # Tentar montar cada parti√ß√£o encontrada
        local sucesso=0
        local falha=0
        for particao in "${particoes_encontradas[@]}"; do
            if montar_particao "$particao" "$tipo_fs"; then
                ((sucesso++))
            else
                ((falha++))
            fi
        done

        # Resumo de montagem
        log "INFO" "üìä Resumo de montagem $tipo_fs:"
        log "INFO" "‚úÖ Parti√ß√µes montadas com sucesso: $sucesso"
        log "INFO" "‚ùå Parti√ß√µes com falha de montagem: $falha"

        return 0
    fi
}

# Fun√ß√£o principal
main() {
    log "INFO" "üöÄ Iniciando script de montagem de parti√ß√µes"
    
    # Verificar se o script est√° sendo executado com privil√©gios de root
    if [[ $EUID -ne 0 ]]; then
        log "ERRO" "‚ùå Este script deve ser executado com privil√©gios de root (sudo)"
        exit 1
    fi

    # Montar parti√ß√µes HFS+
    log "INFO" "üçè Iniciando varredura de parti√ß√µes HFS+"
    escanear_particoes "hfsplus"

    # Montar parti√ß√µes NTFS
    log "INFO" "üíæ Iniciando varredura de parti√ß√µes NTFS"
    escanear_particoes "ntfs"

    # Montar parti√ß√µes APFS
    log "INFO" "üçé Iniciando varredura de parti√ß√µes APFS"
    escanear_particoes "apfs"

    log "SUCESSO" "‚ú® Script de montagem conclu√≠do"
}

# Executar main apenas se o script for executado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi
