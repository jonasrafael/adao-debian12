#!/bin/bash

# Verificar requisitos de sistema
verificar_requisitos() {
    local FALHA=0

    # Verificar vers√£o do bash
    if [[ -z "$BASH_VERSION" ]]; then
        echo "‚ùå Bash n√£o encontrado"
        FALHA=1
    else
        # Comparar vers√£o do bash
        bash_major=$(echo "$BASH_VERSION" | cut -d. -f1)
        bash_minor=$(echo "$BASH_VERSION" | cut -d. -f2)
        
        if [[ $bash_major -lt 5 ]]; then
            echo "‚ùå Vers√£o do Bash muito antiga. Requer 5.0+, atual: $BASH_VERSION"
            FALHA=1
        fi
    fi

    # Verificar pacotes essenciais
    local PACOTES_NECESSARIOS=(
        "mount"
        "umount"
        "lsblk"
        "find"
        "grep"
        "awk"
        "xz"
        "kmod"
    )

    for pacote in "${PACOTES_NECESSARIOS[@]}"; do
        if ! command -v "$pacote" &> /dev/null; then
            echo "‚ùå Pacote necess√°rio n√£o encontrado: $pacote"
            FALHA=1
        fi
    done

    # Verificar privil√©gios de root
    if [[ $EUID -ne 0 ]]; then
        echo "‚ùå Este script requer privil√©gios de root/sudo"
        FALHA=1
    fi

    # Verificar sistema operacional
    local SISTEMA=$(grep -oP '(?<=^ID=).*' /etc/os-release | tr -d '"')
    local VERSAO=$(grep -oP '(?<=^VERSION_ID=).*' /etc/os-release | tr -d '"')

    if [[ "$SISTEMA" != "debian" && "$SISTEMA" != "crunchbangplusplus" ]]; then
        echo "‚ùå Sistema operacional n√£o suportado: $SISTEMA $VERSAO"
        FALHA=1
    fi

    # Verificar espa√ßo em disco
    local espaco_minimo=1024  # 1 GB
    local espaco_disponivel=$(df -m / | awk 'NR==2 {print $4}')

    if [[ $espaco_disponivel -lt $espaco_minimo ]]; then
        echo "‚ùå Espa√ßo em disco insuficiente. Requer pelo menos $espaco_minimo MB, dispon√≠vel: $espaco_disponivel MB"
        FALHA=1
    fi

    # Resultado final
    if [[ $FALHA -eq 1 ]]; then
        echo "‚ùå Alguns requisitos n√£o foram atendidos. Por favor, corrija os problemas acima."
        return 1
    else
        echo "‚úÖ Todos os requisitos de sistema verificados com sucesso!"
        return 0
    fi
}

# Fun√ß√£o para carregar m√≥dulos do kernel
carregar_modulos_kernel() {
    local MODULOS=(
        "ntfs"
        "apfs"
        "hfsplus"
        "ext4"
    )

    echo "üîå Carregando m√≥dulos do kernel..."

    # Verificar vers√£o do kernel
    local KERNEL_VERSION=$(uname -r)
    local KERNEL_MODULES_DIR="/lib/modules/${KERNEL_VERSION}"

    # Criar diret√≥rio de m√≥dulos se n√£o existir
    mkdir -p "$KERNEL_MODULES_DIR/kernel/fs"

    for modulo in "${MODULOS[@]}"; do
        # Tratamento espec√≠fico para cada m√≥dulo
        case "$modulo" in
            "ntfs")
                # Usar ntfs-3g como alternativa
                if ! modprobe ntfs 2>/dev/null; then
                    echo "‚ö†Ô∏è M√≥dulo NTFS n√£o encontrado. Usando ntfs-3g..."
                    apt-get install -y ntfs-3g
                    # Criar link simb√≥lico para m√≥dulo
                    ln -sf /usr/bin/ntfs-3g "$KERNEL_MODULES_DIR/kernel/fs/ntfs.ko" 2>/dev/null
                fi
                ;;
            
            "apfs")
                # Usar apfs-fuse como alternativa
                echo "‚ÑπÔ∏è Suporte a APFS ser√° instalado via apfs-fuse"
                ;;
            
            "hfsplus")
                if ! modprobe hfsplus 2>/dev/null; then
                    echo "‚ö†Ô∏è M√≥dulo HFS+ n√£o encontrado. Instalando hfsprogs..."
                    apt-get install -y hfsprogs
                fi
                ;;
            
            "ext4")
                # M√≥dulo ext4 geralmente j√° est√° no kernel
                modprobe ext4 || true
                ;;
        esac
    done

    # Atualizar mapa de m√≥dulos
    depmod -a
}

# Fun√ß√£o para configurar ambiente de localiza√ß√£o
configurar_localizacao() {
    echo "üåê Configurando ambiente de localiza√ß√£o..."
    
    # Verificar e gerar locales
    if ! locale -a | grep -q "en_US.UTF-8"; then
        echo "Gerando locale en_US.UTF-8..."
        locale-gen en_US.UTF-8
    fi

    # Configurar vari√°veis de ambiente
    export LANGUAGE=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export LC_CTYPE=en_US.UTF-8

    # Atualizar configura√ß√µes de localiza√ß√£o
    update-locale LANG=en_US.UTF-8
}

# Fun√ß√£o para instalar e configurar FUSE e apfs-fuse
instalar_fuse_apfs() {
    echo "üîß Instalando FUSE e preparando apfs-fuse..."

    # Atualizar reposit√≥rios
    apt-get update

    # Instalar depend√™ncias necess√°rias
    apt-get install -y \
        fuse \
        libfuse3-dev \
        bzip2 \
        libbz2-dev \
        cmake \
        gcc \
        git \
        libattr1-dev \
        zlib1g-dev \
        build-essential \
        libssl-dev

    # Criar diret√≥rio tempor√°rio para compila√ß√£o
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"

    # Clonar reposit√≥rio apfs-fuse
    if ! git clone https://github.com/sgan81/apfs-fuse.git; then
        echo "‚ùå Falha ao clonar reposit√≥rio apfs-fuse"
        return 1
    fi

    # Entrar no diret√≥rio do projeto
    cd apfs-fuse

    # Inicializar e atualizar subm√≥dulos
    git submodule init
    git submodule update

    # Preparar compila√ß√£o
    mkdir -p build
    cd build

    # Configurar com CMake
    if ! cmake ..; then
        echo "‚ùå Falha na configura√ß√£o do CMake"
        return 1
    fi

    # Compilar
    if ! make; then
        echo "‚ùå Falha na compila√ß√£o do apfs-fuse"
        return 1
    fi

    # Instalar
    if ! make install; then
        echo "‚ùå Falha na instala√ß√£o do apfs-fuse"
        return 1
    fi

    # Limpar diret√≥rio tempor√°rio
    cd /
    rm -rf "$temp_dir"

    # Verificar instala√ß√£o
    if ! command -v apfs-fuse &> /dev/null; then
        echo "‚ùå Instala√ß√£o do apfs-fuse n√£o encontrada"
        return 1
    fi

    echo "‚úÖ FUSE e apfs-fuse instalados com sucesso!"
    return 0
}

# Fun√ß√£o para resolver conflitos de pacotes FUSE
resolver_conflitos_fuse() {
    echo "üîß Resolvendo conflitos de pacotes FUSE para CrunchBang++..."

    # Configura√ß√£o de locales
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8

    # Atualizar configura√ß√µes de locales
    sed -i 's/^# *en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
    locale-gen en_US.UTF-8 > /dev/null 2>&1
    update-locale LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8 > /dev/null 2>&1

    # Limpar e atualizar reposit√≥rios
    apt-get clean
    apt-get update -qq

    # Desinstalar pacotes conflitantes
    apt-get remove -y --purge \
        fuse \
        fuse3 \
        libfuse2 \
        libfuse-dev \
        libfuse3-3 \
        libfuse3-dev \
        ntfs-3g \
        exfat-fuse \
        || true

    # Instalar FUSE e apfs-fuse
    if ! instalar_fuse_apfs; then
        echo "‚ùå Falha na instala√ß√£o de FUSE e apfs-fuse"
        return 1
    fi

    # Configurar alternativas de montagem
    if [ -f "/usr/bin/fusermount3" ]; then
        update-alternatives --install /usr/bin/fusermount fusermount /usr/bin/fusermount3 100
        update-alternatives --set fusermount /usr/bin/fusermount3
    fi

    # Adicionar suporte a sistemas de arquivos
    modprobe fuse || true
    modprobe ntfs3 || true

    echo "‚úÖ Conflitos de FUSE resolvidos com sucesso"
    return 0
}

# Fun√ß√£o para instalar depend√™ncias espec√≠ficas
instalar_dependencias_especificas() {
    echo "üõ†Ô∏è Instalando depend√™ncias espec√≠ficas..."

    # Atualizar lista de pacotes
    apt-get update

    # Pacotes a serem instalados
    local PACOTES=(
        "ntfs-3g"
        "hfsprogs"
        "exfat-fuse"
    )

    # Substituir pacotes obsoletos
    for pacote in "${PACOTES[@]}"; do
        apt-get install -y "$pacote" || {
            echo "‚ùå Falha ao instalar $pacote"
            
            # Tratamentos espec√≠ficos
            case "$pacote" in
                "exfat-utils")
                    echo "üîç Usando exfat-fuse como alternativa"
                    apt-get install -y exfat-fuse
                    ;;
            esac
        }
    done

    # Instalar depend√™ncias FUSE
    if ! instalar_fuse_apfs; then
        echo "‚ùå Falha na instala√ß√£o das depend√™ncias FUSE"
        return 1
    fi

    # Instalar apfs-fuse se n√£o estiver presente
    if ! command -v apfs-fuse &> /dev/null; then
        echo "üçé Instalando apfs-fuse..."
        instalar_fuse_apfs || {
            echo "‚ùå Falha na instala√ß√£o do APFS-FUSE"
            return 1
        }
    fi

    return 0
}

# Fun√ß√£o para compilar e instalar APFS-FUSE
compilar_apfs_fuse() {
    echo "üçé Compilando APFS-FUSE a partir do c√≥digo-fonte..."
    
    # Criar diret√≥rio tempor√°rio
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    # Clonar reposit√≥rio
    if ! git clone --recursive https://github.com/sgan81/apfs-fuse.git; then
        echo "‚ùå Falha ao clonar reposit√≥rio do APFS-FUSE"
        return 1
    fi
    
    cd apfs-fuse
    
    # Preparar compila√ß√£o
    mkdir -p build
    cd build
    
    # Configurar CMake com flags adicionais
    local FUSE_INCLUDE_DIRS=$(pkg-config --cflags fuse3)
    
    if ! cmake -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_INSTALL_PREFIX=/usr/local \
               -DBUILD_SHARED_LIBS=ON \
               -DCMAKE_C_FLAGS="-Wno-sign-compare" \
               -DCMAKE_CXX_FLAGS="-Wno-sign-compare" \
               -DFUSE_INCLUDE_DIRS=/usr/include/fuse3 \
               ..; then
        echo "‚ùå Falha na configura√ß√£o do CMake para APFS-FUSE"
        return 1
    fi
    
    # Modificar c√≥digo-fonte para corrigir warnings
    sed -i 's/for (int i = 0; i < table_size; i++)/for (size_t i = 0; i < table_size; i++)/g' \
        ../3rdparty/lzfse/src/lzfse_fse.h
    
    # Compilar
    if ! make -j$(nproc); then
        echo "‚ùå Falha na compila√ß√£o do APFS-FUSE"
        
        # Identificar depend√™ncias faltantes
        local missing_headers=$(find . -type f -name "*.cpp" -exec grep -l "#include" {} \; | xargs grep -l "No such file or directory")
        echo "üîç Cabe√ßalhos ausentes: $missing_headers"
        
        return 1
    fi
    
    # Instalar
    if ! make install; then
        echo "‚ùå Falha na instala√ß√£o do APFS-FUSE"
        return 1
    fi
    
    # Adicionar biblioteca ao sistema
    ldconfig
    
    # Verificar instala√ß√£o
    if ! command -v apfs-fuse &> /dev/null; then
        echo "‚ùå Comando apfs-fuse n√£o encontrado ap√≥s instala√ß√£o"
        return 1
    fi
    
    echo "‚úÖ APFS-FUSE instalado com sucesso!"
    return 0
}

# Fun√ß√£o para instalar depend√™ncias de compila√ß√£o
instalar_dependencias_compilacao() {
    echo "üõ†Ô∏è Instalando depend√™ncias de compila√ß√£o..."
    apt-get update
    apt-get install -y \
        git \
        cmake \
        build-essential \
        libfuse-dev \
        libssl-dev \
        libz-dev \
        libbz2-dev
}

# Instalar apfs-fuse do GitHub
instalar_apfs_fuse() {
    echo "üçé Instalando apfs-fuse do GitHub..."
    
    # Criar diret√≥rio tempor√°rio
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    # Clonar reposit√≥rio
    if ! git clone https://github.com/sgan81/apfs-fuse.git; then
        echo "‚ùå Falha ao clonar reposit√≥rio do apfs-fuse"
        return 1
    fi
    
    cd apfs-fuse
    
    # Atualizar subm√≥dulos
    if ! git submodule update --init; then
        echo "‚ùå Falha ao atualizar subm√≥dulos do apfs-fuse"
        return 1
    fi
    
    # Preparar compila√ß√£o
    mkdir -p build
    cd build
    
    # Configurar com CMake com flags adicionais
    if ! cmake -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_INSTALL_PREFIX=/usr/local \
               -DBUILD_SHARED_LIBS=ON \
               ..; then
        echo "‚ùå Falha na configura√ß√£o do CMake para apfs-fuse"
        return 1
    fi
    
    # Compilar com verifica√ß√£o de erros
    if ! make -j$(nproc); then
        echo "‚ùå Falha na compila√ß√£o do apfs-fuse"
        
        # Tentar identificar depend√™ncias faltantes
        echo "üîç Verificando depend√™ncias..."
        local missing_deps=$(find /tmp -name "*.h" | grep -E "bzlib.h|lzma.h|zlib.h" | xargs -I {} echo "Faltando: {}")
        
        if [ -n "$missing_deps" ]; then
            echo "$missing_deps"
            echo "üõ†Ô∏è Tentando instalar depend√™ncias adicionais..."
            apt-get update
            apt-get install -y \
                libbz2-dev \
                liblzma-dev \
                zlib1g-dev
        fi
        
        return 1
    fi
    
    # Instalar
    if ! make install; then
        echo "‚ùå Falha na instala√ß√£o do apfs-fuse"
        return 1
    fi
    
    # Adicionar biblioteca ao sistema
    if [ -f /usr/local/lib/libapfs.so ]; then
        ldconfig
    fi
    
    # Limpar diret√≥rio tempor√°rio
    cd /
    rm -rf "$temp_dir"
    
    echo "‚úÖ apfs-fuse instalado com sucesso!"
    return 0
}

# Instalar depend√™ncias
instalar_dependencias() {
    echo "üîß Instalando depend√™ncias..."
    apt-get update
    apt-get install -y \
        ntfs-3g \
        hfsprogs \
        exfat-fuse \
        dosfstools \
        btrfs-progs \
        fuse \
        hfsutils \
        exfat-utils \
        libfuse2 \
        libfuse3-dev \
        liblzma-dev \
        zlib1g-dev

    # Instalar depend√™ncias de compila√ß√£o
    instalar_dependencias_compilacao

    # Instalar apfs-fuse com tratamento de erro
    if ! instalar_apfs_fuse; then
        echo "‚ö†Ô∏è Falha na instala√ß√£o do apfs-fuse. Tentando m√©todo alternativo..."
        
        # M√©todo alternativo: baixar bin√°rio pr√©-compilado
        local temp_dir=$(mktemp -d)
        cd "$temp_dir"
        
        if wget https://github.com/sgan81/apfs-fuse/releases/latest/download/apfs-fuse-linux-x86_64.tar.gz; then
            tar -xzvf apfs-fuse-linux-x86_64.tar.gz
            cp apfs-fuse /usr/local/bin/
            cp apfs-fuse-static /usr/local/bin/
            chmod +x /usr/local/bin/apfs-fuse*
            echo "‚úÖ Instala√ß√£o alternativa do apfs-fuse conclu√≠da"
        else
            echo "‚ùå Falha na instala√ß√£o alternativa do apfs-fuse"
        fi
        
        cd /
        rm -rf "$temp_dir"
    fi
    
    # Verificar instala√ß√£o de depend√™ncias
    local DEPENDENCIAS=(
        "mount.ntfs-3g"
        "fsck.hfsplus"
        "mount.exfat-fuse"
        "apfs-fuse"
    )

    for dep in "${DEPENDENCIAS[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo "‚ö†Ô∏è Depend√™ncia n√£o encontrada: $dep"
            # Tentar instalar pacotes alternativos
            case "$dep" in
                "fsck.hfsplus")
                    apt-get install -y hfsprogs hfsutils
                    ;;
                "mount.exfat-fuse")
                    apt-get install -y exfat-fuse exfat-utils
                    ;;
                "apfs-fuse")
                    # √öltima tentativa de instala√ß√£o
                    instalar_apfs_fuse || true
                    ;;
            esac
        fi
    done
}

# Instalar scripts
instalar_scripts() {
    local scripts=(
        "adao.sh:adao"
        "calcular-consumo.sh:calcular-consumo"
    )

    for script in "${scripts[@]}"; do
        local source_name=$(echo "$script" | cut -d: -f1)
        local target_name=$(echo "$script" | cut -d: -f2)
        local source_paths=(
            "$SCRIPT_DIR/$source_name"
            "$HOME/$source_name"
            "/Users/jonasrafael/$source_name"
        )

        local found=false
        for path in "${source_paths[@]}"; do
            if [ -f "$path" ]; then
                cp "$path" "$INSTALL_DIR/$target_name"
                chmod +x "$INSTALL_DIR/$target_name"
                echo "‚úÖ Instalado: $target_name de $path"
                found=true
                break
            fi
        done

        if [ "$found" = false ]; then
            echo "‚ùå Script $source_name n√£o encontrado"
        fi
    done
}

# Configura√ß√µes adicionais
configuracoes_sistema() {
    echo "üîí Configurando montagem de sistemas de arquivos..."
    
    # Ajustar configura√ß√µes de montagem
    sed -i 's/^MOUNTOPTIONS=.*/MOUNTOPTIONS="user,exec,utf8,uid=1000,gid=1000"/' /etc/adduser.conf
    
    # Adicionar suporte FUSE para usu√°rios n√£o-root
    if ! grep -q "user_allow_other" /etc/fuse.conf; then
        echo "user_allow_other" >> /etc/fuse.conf
    fi
}

# Fun√ß√£o para configurar Samba e compartilhamento de discos
configurar_samba_discos() {
    echo "üñ•Ô∏è Configurando Samba e compartilhamento de discos..."

    # Criar diret√≥rio de discos se n√£o existir
    mkdir -p /home/jonas/discos

    # Instalar Samba
    apt-get update -qq
    apt-get install -y samba cifs-utils

    # Configurar permiss√µes do diret√≥rio
    chown -R jonas:jonas /home/jonas/discos
    chmod -R 775 /home/jonas/discos

    # Verificar se usu√°rio jonas existe
    if ! id "jonas" &>/dev/null; then
        echo "‚ùå Usu√°rio jonas n√£o encontrado. Criando usu√°rio..."
        adduser --disabled-password --gecos "" jonas
    fi

    # Configurar Samba para compartilhamento
    local SAMBA_CONFIG="/etc/samba/smb.conf"
    
    # Backup da configura√ß√£o original
    cp "$SAMBA_CONFIG" "${SAMBA_CONFIG}.bak" 2>/dev/null

    # Limpar configura√ß√µes anteriores de compartilhamento
    sed -i '/\[discos\]/,/^$/d' "$SAMBA_CONFIG"

    # Adicionar configura√ß√£o de compartilhamento
    cat << EOF >> "$SAMBA_CONFIG"

[discos]
    path = /home/jonas/discos
    browseable = yes
    read only = no
    writable = yes
    guest ok = no
    valid users = jonas
    create mask = 0775
    directory mask = 0775
    force user = jonas
    force group = jonas
EOF

    # Gerar senha aleat√≥ria segura
    local SAMBA_PASS=$(openssl rand -base64 12)
    
    # Adicionar usu√°rio jonas ao Samba com senha segura
    (echo "$SAMBA_PASS"; echo "$SAMBA_PASS") | smbpasswd -a jonas
    
    # Salvar senha em arquivo seguro para refer√™ncia
    echo "Senha Samba para usu√°rio jonas: $SAMBA_PASS" > /home/jonas/samba_password.txt
    chmod 600 /home/jonas/samba_password.txt
    chown jonas:jonas /home/jonas/samba_password.txt

    # Reiniciar servi√ßo Samba
    systemctl restart smbd
    systemctl enable smbd

    # Configurar firewall para Samba (se UFW estiver ativo)
    if command -v ufw &> /dev/null; then
        ufw allow from any to any port 445 proto tcp comment "Samba"
        ufw allow from any to any port 139 proto tcp comment "Samba"
    fi

    echo "‚úÖ Samba configurado com sucesso para compartilhamento de discos"
    echo "üìù Senha do Samba salva em /home/jonas/samba_password.txt"
    return 0
}

# Verificar root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Necess√°rio executar com sudo"
    exit 1
fi

# Verificar sistema operacional
verificar_sistema() {
    local SISTEMA=$(grep -oP '(?<=^ID=).*' /etc/os-release | tr -d '"')
    local DISTRIBUICAO=$(grep -oP '(?<=^PRETTY_NAME=).*' /etc/os-release | tr -d '"')

    case "$SISTEMA" in
        debian|crunchbangplusplus)
            echo "‚úÖ Sistema compat√≠vel: $DISTRIBUICAO"
            ;;
        *)
            echo "‚ùå Sistema n√£o suportado: $DISTRIBUICAO"
            exit 1
            ;;
    esac
}

# Diret√≥rios
INSTALL_DIR="/usr/local/bin"
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

# Instalar depend√™ncias de compila√ß√£o
instalar_dependencias_compilacao() {
    echo "üõ†Ô∏è Instalando depend√™ncias de compila√ß√£o..."
    apt-get update
    apt-get install -y \
        git \
        cmake \
        build-essential \
        libfuse-dev \
        libssl-dev \
        libz-dev \
        libbz2-dev
}

# Instalar apfs-fuse do GitHub
instalar_apfs_fuse() {
    echo "üçé Instalando apfs-fuse do GitHub..."
    
    # Criar diret√≥rio tempor√°rio
    local temp_dir=$(mktemp -d)
    cd "$temp_dir"
    
    # Clonar reposit√≥rio
    if ! git clone https://github.com/sgan81/apfs-fuse.git; then
        echo "‚ùå Falha ao clonar reposit√≥rio do apfs-fuse"
        return 1
    fi
    
    cd apfs-fuse
    
    # Atualizar subm√≥dulos
    if ! git submodule update --init; then
        echo "‚ùå Falha ao atualizar subm√≥dulos do apfs-fuse"
        return 1
    fi
    
    # Preparar compila√ß√£o
    mkdir -p build
    cd build
    
    # Configurar com CMake com flags adicionais
    if ! cmake -DCMAKE_BUILD_TYPE=Release \
               -DCMAKE_INSTALL_PREFIX=/usr/local \
               -DBUILD_SHARED_LIBS=ON \
               ..; then
        echo "‚ùå Falha na configura√ß√£o do CMake para apfs-fuse"
        return 1
    fi
    
    # Compilar com verifica√ß√£o de erros
    if ! make -j$(nproc); then
        echo "‚ùå Falha na compila√ß√£o do apfs-fuse"
        
        # Tentar identificar depend√™ncias faltantes
        echo "üîç Verificando depend√™ncias..."
        local missing_deps=$(find /tmp -name "*.h" | grep -E "bzlib.h|lzma.h|zlib.h" | xargs -I {} echo "Faltando: {}")
        
        if [ -n "$missing_deps" ]; then
            echo "$missing_deps"
            echo "üõ†Ô∏è Tentando instalar depend√™ncias adicionais..."
            apt-get update
            apt-get install -y \
                libbz2-dev \
                liblzma-dev \
                zlib1g-dev
        fi
        
        return 1
    fi
    
    # Instalar
    if ! make install; then
        echo "‚ùå Falha na instala√ß√£o do apfs-fuse"
        return 1
    fi
    
    # Adicionar biblioteca ao sistema
    if [ -f /usr/local/lib/libapfs.so ]; then
        ldconfig
    fi
    
    # Limpar diret√≥rio tempor√°rio
    cd /
    rm -rf "$temp_dir"
    
    echo "‚úÖ apfs-fuse instalado com sucesso!"
    return 0
}

# Instalar depend√™ncias
instalar_dependencias() {
    echo "üîß Instalando depend√™ncias..."
    apt-get update
    apt-get install -y \
        ntfs-3g \
        hfsprogs \
        exfat-fuse \
        dosfstools \
        btrfs-progs \
        fuse \
        hfsutils \
        exfat-utils \
        libfuse2 \
        libfuse3-dev \
        liblzma-dev \
        zlib1g-dev

    # Instalar depend√™ncias de compila√ß√£o
    instalar_dependencias_compilacao

    # Instalar apfs-fuse com tratamento de erro
    if ! instalar_apfs_fuse; then
        echo "‚ö†Ô∏è Falha na instala√ß√£o do apfs-fuse. Tentando m√©todo alternativo..."
        
        # M√©todo alternativo: baixar bin√°rio pr√©-compilado
        local temp_dir=$(mktemp -d)
        cd "$temp_dir"
        
        if wget https://github.com/sgan81/apfs-fuse/releases/latest/download/apfs-fuse-linux-x86_64.tar.gz; then
            tar -xzvf apfs-fuse-linux-x86_64.tar.gz
            cp apfs-fuse /usr/local/bin/
            cp apfs-fuse-static /usr/local/bin/
            chmod +x /usr/local/bin/apfs-fuse*
            echo "‚úÖ Instala√ß√£o alternativa do apfs-fuse conclu√≠da"
        else
            echo "‚ùå Falha na instala√ß√£o alternativa do apfs-fuse"
        fi
        
        cd /
        rm -rf "$temp_dir"
    fi
    
    # Verificar instala√ß√£o de depend√™ncias
    local DEPENDENCIAS=(
        "mount.ntfs-3g"
        "fsck.hfsplus"
        "mount.exfat-fuse"
        "apfs-fuse"
    )

    for dep in "${DEPENDENCIAS[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo "‚ö†Ô∏è Depend√™ncia n√£o encontrada: $dep"
            # Tentar instalar pacotes alternativos
            case "$dep" in
                "fsck.hfsplus")
                    apt-get install -y hfsprogs hfsutils
                    ;;
                "mount.exfat-fuse")
                    apt-get install -y exfat-fuse exfat-utils
                    ;;
                "apfs-fuse")
                    # √öltima tentativa de instala√ß√£o
                    instalar_apfs_fuse || true
                    ;;
            esac
        fi
    done
}

# Instalar scripts
instalar_scripts() {
    local scripts=(
        "adao.sh:adao"
        "calcular-consumo.sh:calcular-consumo"
    )

    for script in "${scripts[@]}"; do
        local source_name=$(echo "$script" | cut -d: -f1)
        local target_name=$(echo "$script" | cut -d: -f2)
        local source_paths=(
            "$SCRIPT_DIR/$source_name"
            "$HOME/$source_name"
            "/Users/jonasrafael/$source_name"
        )

        local found=false
        for path in "${source_paths[@]}"; do
            if [ -f "$path" ]; then
                cp "$path" "$INSTALL_DIR/$target_name"
                chmod +x "$INSTALL_DIR/$target_name"
                echo "‚úÖ Instalado: $target_name de $path"
                found=true
                break
            fi
        done

        if [ "$found" = false ]; then
            echo "‚ùå Script $source_name n√£o encontrado"
        fi
    done
}

# Configura√ß√µes adicionais
configuracoes_sistema() {
    echo "üîí Configurando montagem de sistemas de arquivos..."
    
    # Ajustar configura√ß√µes de montagem
    sed -i 's/^MOUNTOPTIONS=.*/MOUNTOPTIONS="user,exec,utf8,uid=1000,gid=1000"/' /etc/adduser.conf
    
    # Adicionar suporte FUSE para usu√°rios n√£o-root
    if ! grep -q "user_allow_other" /etc/fuse.conf; then
        echo "user_allow_other" >> /etc/fuse.conf
    fi
}

# Fun√ß√£o para configurar Samba e compartilhamento de discos
configurar_samba_discos() {
    echo "üñ•Ô∏è Configurando Samba e compartilhamento de discos..."

    # Criar diret√≥rio de discos se n√£o existir
    mkdir -p /home/jonas/discos

    # Instalar Samba
    apt-get update -qq
    apt-get install -y samba cifs-utils

    # Configurar permiss√µes do diret√≥rio
    chown -R jonas:jonas /home/jonas/discos
    chmod -R 775 /home/jonas/discos

    # Verificar se usu√°rio jonas existe
    if ! id "jonas" &>/dev/null; then
        echo "‚ùå Usu√°rio jonas n√£o encontrado. Criando usu√°rio..."
        adduser --disabled-password --gecos "" jonas
    fi

    # Configurar Samba para compartilhamento
    local SAMBA_CONFIG="/etc/samba/smb.conf"
    
    # Backup da configura√ß√£o original
    cp "$SAMBA_CONFIG" "${SAMBA_CONFIG}.bak" 2>/dev/null

    # Limpar configura√ß√µes anteriores de compartilhamento
    sed -i '/\[discos\]/,/^$/d' "$SAMBA_CONFIG"

    # Adicionar configura√ß√£o de compartilhamento
    cat << EOF >> "$SAMBA_CONFIG"

[discos]
    path = /home/jonas/discos
    browseable = yes
    read only = no
    writable = yes
    guest ok = no
    valid users = jonas
    create mask = 0775
    directory mask = 0775
    force user = jonas
    force group = jonas
EOF

    # Gerar senha aleat√≥ria segura
    local SAMBA_PASS=$(openssl rand -base64 12)
    
    # Adicionar usu√°rio jonas ao Samba com senha segura
    (echo "$SAMBA_PASS"; echo "$SAMBA_PASS") | smbpasswd -a jonas
    
    # Salvar senha em arquivo seguro para refer√™ncia
    echo "Senha Samba para usu√°rio jonas: $SAMBA_PASS" > /home/jonas/samba_password.txt
    chmod 600 /home/jonas/samba_password.txt
    chown jonas:jonas /home/jonas/samba_password.txt

    # Reiniciar servi√ßo Samba
    systemctl restart smbd
    systemctl enable smbd

    # Configurar firewall para Samba (se UFW estiver ativo)
    if command -v ufw &> /dev/null; then
        ufw allow from any to any port 445 proto tcp comment "Samba"
        ufw allow from any to any port 139 proto tcp comment "Samba"
    fi

    echo "‚úÖ Samba configurado com sucesso para compartilhamento de discos"
    echo "üìù Senha do Samba salva em /home/jonas/samba_password.txt"
    return 0
}

# Executar instala√ß√£o
main() {
    # Verificar requisitos antes de iniciar
    if ! verificar_requisitos; then
        echo "‚ùå Falha na verifica√ß√£o de requisitos. N√£o √© poss√≠vel continuar."
        exit 1
    fi

    # Carregar m√≥dulos do kernel
    carregar_modulos_kernel

    # Instalar depend√™ncias espec√≠ficas
    if ! instalar_dependencias_especificas; then
        echo "‚ùå Falha na instala√ß√£o de depend√™ncias espec√≠ficas"
        exit 1
    fi

    verificar_sistema
    instalar_dependencias
    instalar_scripts
    configuracoes_sistema
    configurar_samba_discos
    
    echo "üéâ Instala√ß√£o do Ad√£o conclu√≠da no CrunchBang++!"
}

# Iniciar instala√ß√£o
main
exit 0
